include macro.lib
.model small 
.data
	cara db ?
	fail1 db 'error $' 
	win1 db 'contraseña correcta $'
	CONTRA db 'PELUCAS$'
	opc db ? ;esto funciona como una opcion para un switch 0-codifica 1-decodifica
			;en hexadecimal!
	errop db 'Opcion no valida$'
	numeroo db 'May/min/num/c.especiales: $'
	origen DB 'origen.txt',0
	HANDLE   DW ?
	FBUFF	 DB ?  ;ARCHIVO DE DATOS DEL BUFFER
	ma db 0
	mi db 0
	nu db 0
	cesp db 0
.stack
.code
	inicio:
		mov ax,@data
		mov ds,ax
		LEE	;llama macro para leer la contraseña que recibe como argumento
	fail:
		desp fail1 ;desp recibe una variable dw y la escribe en pantalla
		jmp fin
	win:
		desp win1
		CALL ABREARCH		;ABRE ARCHIVO BUFF.ASM
		JC FIN				;SALTA SI HUBO ERROR	
		CALL LEEARCH		;LEE BUFF.ASM
		CALL CIEARCH		;CIERRA BUFF.ASM
		desp numeroo
		cc ma
		despc ma
		despc 32d
		cc mi
		despc mi
		despc 32d
		cc nu
		despc nu
		despc 32d
		cc cesp
		despc cesp
	fin:
		mov ah,4ch
		int 21h
	
	ABREARCH PROC
		MOV AH,3DH		   ;ABRE ARCHIVO
		lEA DX,origen	   ;nombre del archivo que estamos abriendo
		MOV AL,0			   ;solo lectura
		INT 21H
		MOV HANDLE,AX		   ;SALVA EL ARCHIVO
		RET			
	ABREARCH ENDP
	
	LEEARCH PROC 
		MOV AH,3FH
		MOV BX,HANDLE
		LEA DX,FBUFF
			MOV CX,1
			INT 21H
		CMP AX,0
		JZ EOFF
			MOV DL,FBUFF
			CMP DL,1AH
		JZ EOFF
		mov cara,dl
		DESPC cara
		cuenta cara
		SWITCH
		JMP leearch       
		EOFF:   RET
	LEEARCH ENDP
	
	
	CIEARCH PROC
		MOV AH,3EH
		MOV BX,HANDLE
		INT 21H
		RET
	CIEARCH ENDP
	end inicio
